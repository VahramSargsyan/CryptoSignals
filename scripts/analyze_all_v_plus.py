import os
import pandas as pd
from utils import calculate_bollinger_bands, calculate_stoch_rsi
from datetime import datetime, timedelta

DATA_DIR = "data"
TOKENS_FILE = "tokens.csv"
OUTPUT_FILE = "v_plus_signals_report.csv"
DAYS_BACK = 10  # –°–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –Ω–∞–∑–∞–¥ —Å—á–∏—Ç–∞—é—Ç—Å—è "–∞–∫—Ç—É–∞–ª—å–Ω—ã–µ" —Å–∏–≥–Ω–∞–ª—ã

# –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤
tokens_df = pd.read_csv(TOKENS_FILE)
symbols = tokens_df['symbol'].tolist()

# –¢–∞–±–ª–∏—Ü–∞ –∏—Ç–æ–≥–æ–≤
results = []

print("üìä –ê–Ω–∞–ª–∏–∑ –ø–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ Bollasto V+ (–æ–±—ä—ë–º–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä):\n")

for symbol in symbols:
    path = os.path.join(DATA_DIR, f"{symbol}.csv")
    if not os.path.exists(path):
        print(f"‚ö†Ô∏è {symbol}: —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω ‚Üí –ø—Ä–æ–ø—É—â–µ–Ω")
        continue

    try:
        df = pd.read_csv(path)
        df['Date'] = pd.to_datetime(df['Date'])
        df.sort_values(by='Date', inplace=True)
        df.set_index('Date', inplace=True)

        # –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
        df = calculate_bollinger_bands(df)
        df = calculate_stoch_rsi(df)
        df['MA_Volume'] = df['Volume'].rolling(20).mean()

        # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ N –¥–Ω–µ–π
        cutoff_date = datetime.now() - timedelta(days=DAYS_BACK)
        recent = df[df.index >= cutoff_date]

        # –ü–æ–∏—Å–∫ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–∏–≥–Ω–∞–ª–∞ (–ø–æ —É–±—ã–≤–∞–Ω–∏—é)
        for date, row in recent[::-1].iterrows():
            buy_cond = (
                row['Close'] <= row['Lower'] and
                row['StochRSI'] < 20 and
                row['Volume'] > row['MA_Volume']
            )
            sell_cond = (
                row['Close'] >= row['Upper'] and
                row['StochRSI'] > 80 and
                row['Volume'] > row['MA_Volume']
            )
            if buy_cond:
                results.append({
                    "Symbol": symbol,
                    "Signal": "BUY",
                    "Date": date.strftime("%Y-%m-%d"),
                    "Price": round(row['Close'], 6)
                })
                break
            elif sell_cond:
                results.append({
                    "Symbol": symbol,
                    "Signal": "SELL",
                    "Date": date.strftime("%Y-%m-%d"),
                    "Price": round(row['Close'], 6)
                })
                break

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ {symbol}: {str(e)}")
        continue

# –í—ã–≤–æ–¥
if results:
    df_result = pd.DataFrame(results)
    df_result.sort_values(by="Symbol", inplace=True)
    df_result.to_csv(OUTPUT_FILE, index=False)
    print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(df_result)} —Å–∏–≥–Ω–∞–ª–æ–≤. –û—Ç—á—ë—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ {OUTPUT_FILE}:\n")
    print(df_result.to_string(index=False))
else:
    print("üü° –°–∏–≥–Ω–∞–ª–æ–≤ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–Ω–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
